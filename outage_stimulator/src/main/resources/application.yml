# application.yml
# This file contains the main configuration for your outage-simulator microservice.
# Properties defined here can be overridden by configuration fetched from the Config Server.

server:
  # The port on which this microservice will run.
  port: 8085

spring:
  # The application name is defined here again for clarity, but the one in bootstrap.yml
  # is critical for connecting to the Config Server and Eureka. Ensure they match.
  application:
    name: outage-stimulator

  # Database configuration for PostgreSQL.
  datasource:
    # JDBC URL for connecting to your PostgreSQL database.
    # Replace 'outagedb' with your actual database name if different.
    url: jdbc:postgresql://localhost:5432/outageDB
    # Username for database access.
    username: postgres
    # Password for database access.
    password: postgres
    # Specifies the JDBC driver class.
    driver-class-name: org.postgresql.Driver

  # JPA (Java Persistence API) and Hibernate configuration.
  jpa:
    hibernate:
      # 'update' will update the database schema based on your entities.
      # Be cautious with 'update' in production; 'none' or 'validate' are often preferred.
      ddl-auto: update
    # Set to true to log SQL statements to the console.
    show-sql: true
   
incident:
  service:
    url: http://localhost:8081   # adjust accordingly

# Eureka Client configuration for service registration and discovery.
eureka:
  client:
    # Specifies the Eureka Server's URL. This service will register itself here.
    service-url:
      defaultZone: http://localhost:8761/eureka/

# Management endpoints configuration (e.g., for Spring Boot Actuator).


